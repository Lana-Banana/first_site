"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# 프로젝트 루트 디렉토리 경로
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# DB 저장시 사용자계정의 패스워드 암호화 등에 키 값으로 쓰인다.
# 비번에 + Secret_key를 붙여서 이중 복호화 하는 등의 방법을 쓴다.
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')^2-b4v2w!*gfau(x!*dhwn+m(33sc&x(r806m-4g^fl^n8+2e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 어느 서버에서만 실행되게 할것인가? 보통 런칭할 도메인 주소를 많이 쓴다.
# 도메인이 뭐가 될지 잘 모르기 때문에 그냥 * 로 많이 해둔다.
ALLOWED_HOSTS = ['*']


# Application definition
# 회원가입, 권한, 관리자 페이지 등을 기본적으로 돌릴수 있다. 미리 앱을 불러다가 사용함.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookmark',
]

# 사용자 요청을 뷰에서 처리하기 전 중간에서 처리하는 애들 (주로 인증, 보안 , CORS)
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 1차 라우팅 파일 정의
ROOT_URLCONF = 'mysite.urls'

# 프론트 영역 , 템플릿 문법을 사용할건데 걔를 해석할 애들은 템플릿 엔진이다.
# BACKEND : 어떤 템플릿 엔진 을 쓸것인지.
# DIRS: 템플릿 파일 저장 영역
# APP_DIRS: 템플릿 파일 검색 기본 폴더 영역(app 안의 모든 템플릿 파일을 찾아냄)
# OPTIONS: 인터랙션에 일어나면 항상 처리해줘야 하는 값들. 컨텍스트 프로세서를 만들어서 여기다 등록을 해두면, 어떤 템플릿 타입이든 처리시 얘네들이 항상 동작한다.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# 메뉴얼을 보면 DB 종류별 연동값 설정을 알수 있다.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
# 오... 장고에서 밸리데이터 지원.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

# internalization
USE_I18N = True

# localization
USE_L10N = True

# Use Timezone : 서버를 한국에 두면 서버시간은 한국시간으로 된다. 벗 글올린 사람의 접속 시간을 접속한 지역에 맞게 저장한다.
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
